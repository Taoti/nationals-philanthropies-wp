// these styles should move elsewhere, maybe be reused as mixins, when we move beyond the temporary landing page.

body.temporary-page {

  .header-logoLink {
    min-width: 0;
  }

  .header-logo {
    position: static;
    width: 240px;

    @media screen and ( max-width: 840px ) {
      width: 120px;
      height: auto;
    }

    @media screen and ( max-width: 460px ) {
      width: 80px;
    }
  }
}

.tempMenu {
  display: flex;
  height: 100%;
  justify-content: flex-end;
  width: inherit;
}

.tempMenu-link {
  border-left: 1px solid $border-line;
  color: $invert;
  font-family: $sans-2;
  font-size: 1.6rem;
  font-weight: bold;
  letter-spacing: .05em;
  padding-left: 4.6rem;
  padding-right: 8rem;
  padding-top: 3.8rem;
  padding-bottom: 3.7rem;
  position: relative;
  text-transform: uppercase;
  transition: background-color 150ms;
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 100%;

  &::before {
    background-color: transparent;
    border-left: 1px solid $border-line;
    content: '';
    display: block;
    position: absolute;
    transition: background-color 150ms;
    bottom: 100%;
    left: -1px; // offset the width of the border
    height: 200px;
    // width: 200%;
    width: calc( (100vw - (#{$design-width} - #{$container-padding} - #{$container-padding}) ) / 2 + 100% );

    @media screen and ( max-width: $design-width ) {
      width: 200%;
    }
  }

  &:hover {
    color: $invert;
    background-color: $color-2;//$hover;
    text-decoration: none;

    &::before {
      background-color: $color-2;//$hover;
    }
  }

  @media screen and (max-width: 568px){
    padding: 3.8rem 2rem;
  }

}

.tempMenu-icon {
  display: block;
  height: 1rem;
  width: 1.7rem;

  position: absolute;
  top: calc(50% + 1em);

  svg {
    display: block;
  }
}

.tempMenu-item {
  max-width: 294px;
  position: relative;
  width: 100%;

  @media screen and (max-width: 560px) {
    position: static;
  }

}

// The last link in the main menu is supposed to look like a giant red button that extends off the screen. The ::before and ::after elements are used to extend the background-color of the button.
.tempMenu-item:last-child {

  .tempMenu-link {
    background-color: $link;
    border-left: none;

    &::before {
      background-color: $link;
      border-left: none;
      bottom: 100%;
      left: 0;
      height: calc(var(--header-height) - 100% - 7px); // The height of the header, minus the height of this .tempMenu-link (100%), minus the height of the blue/white/red border on #header::before (7px).
      width: calc((100vw - (#{$design-width} - #{$container-padding} - #{$container-padding})) / 2 + 100%);

      @media screen and (max-width: $design-width) {
        width: 200%;
      }

      @media screen and (max-width: 760px) {
        display: none;
      }

    }

    &::after {
      background-color: $link;
      content: '';
      display: block;
      position: absolute;
      transition: background-color 150ms;
      bottom: 0;
      left: 100%;
      height: 100%;
      width: calc( (100vw - (#{$design-width} - #{$container-padding} - #{$container-padding}) ) / 2 );//100%;

      @media screen and ( max-width: $design-width ) {
        width: 100%;
      }
    }

    &:hover {
      background-color: $hover;

      &::before,
      &::after {
        background-color: $hover;
      }
    }

  }

}

.tempMenu-modal {
  box-shadow: 0px 0px 9px 4px rgba(0, 0, 0, 0.4);
  opacity: 0;
  pointer-events: none;
  position: absolute;
  right: 0;
  top: calc(-1 * (var(--header-height) - 100% - 14px)); //0;
  transform: translate3d(0, -3rem, 0) scale3d(0.8, 0.8, 0.8);
  transform-origin: right top;
  transition: opacity 133ms, transform 200ms;
  width: 200%;
  z-index: 2;

  &.is-active {
    pointer-events: auto;
    opacity: 1;
    transform: translate3d(0, 0, 0) scale3d(1, 1, 1);
  }

  @media screen and (max-width: 840px) {
    width: 150%;
    left: 0;
    min-width: 320px;
  }

  @media screen and (max-width: 560px) {
    transform-origin: center top;
    width: 100vw;
  }

}

.tempMenu-modal-inner {
  padding-top: 14.5rem;
}

.tempMenu-modal-subscribe {
  background-color: $color-2;
  color: $invert;
  font-family: $sans-2;

  // Set the gravity forms styles for the form in this modal.
  .gform_heading,
  .gform_body {
    padding: 0 3.5rem;
  }

  .gfield + .gfield {
    margin-top: 3rem;
  }

  .gform_title {
    text-transform: uppercase;
    letter-spacing: .07em;
    margin-bottom: 6rem;

    @media screen and (max-width: 840px) {
      margin-bottom: 2rem;
    }
  }

  .gfield_label {
    display: none;
  }

  .ginput_container input {
    background-color: transparent;
    border: 1px solid transparentize($invert, .5);
    color: inherit;
    padding: 2rem;
    font-size: 1.6rem;
    font-family: inherit;
    width: 100%;
  }

  .ginput_container input::-webkit-input-placeholder {
    color: transparentize($invert, .5);
  }
  .ginput_container input::-moz-placeholder {
    color: transparentize($invert, .5);
  }
  .ginput_container input::-ms-input-placeholder {
    color: transparentize($invert, .5);
  }

  .ginput_container_consent {
    input[type=checkbox] {
      display: none;

      &:checked {
        + .gfield_consent_label::before {
          content: '\00d7';
        }
      }

    }
  }

  .gfield_consent_label {
    cursor: pointer;
    position: relative;

    &::before {
      border: 1px solid transparentize($invert, .5);
      content: '';
      display: inline-block;
      width: 1.9rem;
      height: 1.7rem;
      margin-right: 1rem;
      vertical-align: top;
      font-size: 2rem;
      line-height: .7;
      font-family: sans-serif;
      text-align: center;
    }

  }

  .gform_button {
    appearance: none;
    background: $link;
    border: none;
    color: inherit;
    cursor: pointer;
    display: block;
    font-size: 1.6rem;
    font-family: inherit;
    letter-spacing: .07em;
    margin-top: 10rem;
    padding: 6rem 7.3rem;
    position: relative;
    text-align: left;
    text-transform: uppercase;
    transition: background 125ms;
    width: 100%;

    &:hover {
      background-color: $hover;
    }

    @media screen and (max-width: 840px) {
      margin-top: 3rem;
    }

  }

  .gform_validation_container {
    opacity: 0;
    pointer-events: none;
    position: absolute;
  }

  .gform_confirmation_wrapper {
    padding: 4.5rem;
  }

  .gform_confirmation_message {
    font-size: 2rem;
  }

}

.navContainer-temporary-navigation {


}


// Need to figure out a way to lazyload this after element. Might have to make a noncritical hero file.
.hero {
  &::after {
    content: '';
    background-image: url('../../images/border-page-tear-1.png');
    height: 49px;
    // background-image: url('../../images/border-page-tear-2.png');
    // height: 53px;
    background-repeat: repeat-x;
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 100%;
  }
}


.CTAs {
  padding-bottom: 8rem;
  padding-top: 8rem;
  position: relative;

  // Bad way of getting the center line between the cta columns. I need to change this to a better layout where the border will work.
  &::before {
    content: '';
    display: block;
    width: 1px;
    height: calc(100% - 16rem);
    position: absolute;
    top: 8rem;
    left: 50%;
    background-color: $color-6;
    opacity: .4;

    @media screen and ( max-width: 840px ) {
      display: none;
    }

  }
}

.CTAs-inner {
  display: flex;
  justify-content: space-between;

  @media screen and ( max-width: 840px ) {
    display: block;
  }

}

.cta {
  display: grid;
  flex-basis: calc(50% - 1.4rem);
  grid-gap: 2.4rem;
  grid-template-columns: 98px 1fr; // 98px is the width of the 72x72 icon square when it rotates by 45deg. Remember a^2 + b^2 = c^2
  padding: 0 1.5rem;

  @media screen and ( max-width: 440px ) {
    grid-template-columns: 50px 1fr;
    grid-gap: 1.6rem;
  }

  + .cta {
    @media screen and ( max-width: 840px ) {
      margin-top: 6rem;
    }
  }

}

.cta-side {
  display: flex;
  justify-content: center;
}

.cta-icon {
  display: flex;
  height: 72px;
  width: 72px;
  background-color: $color-4;
  align-items: center;
  justify-content: center;
  transform: rotate(45deg);
  transform-origin: center center;

  @media screen and ( max-width: 440px ) {
    width: 40px;
    height: 40px;
  }

  &::before {
    content: '';
    display: block;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    transform: rotate(-45deg);
    transform-origin: center center;
  }

}

  .cta-icon-letter::before {
      background-image: url('../../images/icon-email.svg');
      width: 27px;
      height: 27px;

      @media screen and ( max-width: 440px ) {
        width: 19px;
        height: 19px;
      }
  }

  .cta-icon-heart-hand::before {
      background-image: url('../../images/icon-heart.svg');
      width: 31px;
      height: 31px;

      @media screen and ( max-width: 440px ) {
        width: 20px;
        height: 20px;
      }
  }

.cta-heading {
  color: $color-7;
  letter-spacing: .0175em;
  margin-bottom: .8rem;
  text-transform: uppercase;
}

.cta-description {
  line-height: 1.75;
}

.cta-buttonIcon {
  display: inline-block;
  height: 1rem;
  padding-left: .8rem;
  width: 2.6rem;
  // transform: translate3d(0, 0, 0);

  svg {
    display: block;
    width: 100%;
    height: auto;
  }

  path {
    fill: $link;
  }
}

.cta-button {
  appearance: none;
  border: none;
  background: none;
  color: $link;
  cursor: pointer;
  font-size: 1.6rem;
  font-family: $sans-2;
  font-weight: bold;
  text-transform: uppercase;
  display: inline-block;
  margin-top: 2.4rem;
  transform: scale3d(1, 1, 1);
  transform-origin: center;
  transition: transform 125ms cubic-bezier(.17, .67, .45, 2);

  &:hover {
    color: $hover;
    text-decoration: none;
    transform: scale3d(1.25, 1.25, 1.25);

    .cta-buttonIcon {
      // transform: translate3d(5px, 0, 0);
    }

    path {
      fill: $hover;
    }

  }

}
