#!/bin/bash

set -eo pipefail

#
# This script prepares the site-under-test by cloning the database from
# an existing site.
#
# Use EITHER this script OR the re-install-new script; do not run both.
#

# Wake up the DEV environment
terminus -n env:wake "$TERMINUS_SITE.dev"

# Prepare for Pantheon
composer run prepare-for-pantheon

# Create a new multidev site to test on if we haven't pushed to master
if [[ $CI_BRANCH != $DEFAULT_BRANCH ]]
then
  # Only use one of these lines. If this is a new multidev content will always be cloned
  # If it is not a new multidev, the default behavior is to keep your test content.
  # If that is not the desired behavior, add `--clone-content` to the command/switch enabled commands.
  terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes
  # terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV" --yes --clone-content
else
  terminus -n build:env:create "$TERMINUS_SITE.dev" "$TERMINUS_ENV"
fi

# Run wp core update-db to ensure that the cloned database is updated for the new code.
terminus -n wp "$TERMINUS_SITE.$TERMINUS_ENV" -- core update-db

# If any modules, or theme files have been moved around or reorganized, in order to avoid
# "The website encountered an unexpected error. Please try again later." error on First Visit
terminus -n wp "$TERMINUS_SITE.$TERMINUS_ENV" cache flush
terminus -n env:clear-cache "$TERMINUS_SITE.$TERMINUS_ENV"

# If exported configuration is available, then import it.
# // @TODO Replace with wp import
# if [ -f "config/system.site.yml" ] ; then
#   terminus -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- config-import --yes
# fi

